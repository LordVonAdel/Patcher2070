export default class OBJ {

  constructor(name = "object") {
    this.name = name;
    this.vertices = [];
    this.triangles = [];
    this.objects = [];
    this.lines = [];
  }

  addVertex(x, y, z) {
    this.vertices.push([x, y, z]);
    return this.vertices.length;
  }

  addLine(index0, index1) {
    this.lines.push([index0, index1]);
  }

  addLineFromPoints(points) {
    const vertices = [];
    for (const point of points) {
      vertices.push(this.addVertex(point[0], point[1], point[2]));
    }

    for (let i = 1; i < vertices.length; i++) {
      this.addLine(
        vertices[i - 1], vertices[i]
      );
    }
  }

  addNGon(points) {
    const vertices = [];
    for (const point of points) {
      vertices.push(this.addVertex(point[0], point[1], point[2]));
    }
    this.triangles.push(vertices);
  }

  addFace(index0, index1, index2) {
    this.triangles.push([index0, index1, index2]);
  }

  toFile() {
    return OBJ.CombineToFile(this);
  }

  static CombineToFile(objects) {
    let out = "# Generated by Patcher 2070\n";
    let vertexOffset = 0;

    for (const obj of objects) { 
      for (const vertex of obj.vertices) {
        out += `v ${vertex[0]} ${vertex[1]} ${vertex[2]}\n`;
      }
    }

    for (const obj of objects) {
      out += `o ${obj.name}\n`;

      for (const triangle of obj.triangles) {
        out += "f " + triangle.map(i => i + vertexOffset).join(" ") + "\n";
        // out += `f ${triangle[0] + vertexOffset} ${triangle[1] + vertexOffset} ${triangle[2] + vertexOffset}\n`
      }

      for (const line of obj.lines) {
        out += `l ${line[0] + vertexOffset} ${line[1] + vertexOffset}\n`
      }

      vertexOffset += obj.vertices.length;
    }

    return out;
  }

}