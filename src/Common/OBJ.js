export default class OBJ {

  constructor(name = "object") {
    this.name = name;
    this.vertices = [];
    this.normals = [];
    this.uvs = [];
    this.triangles = [];
    this.objects = [];
    this.lines = [];
  }

  addVertex(x, y, z) {
    this.vertices.push([x, y, z]);
    return this.vertices.length;
  }

  addNormal(x, y, z) {
    this.normals.push([x, y, z]);
    return this.normals.length;
  }

  addUV(u, v) {
    this.uvs.push([u, v]);
    return this.uvs.length;
  }

  addLine(index0, index1) {
    this.lines.push([index0, index1]);
  }

  addLineFromPoints(points) {
    const vertices = [];
    for (const point of points) {
      vertices.push(this.addVertex(point[0], point[1], point[2]));
    }

    for (let i = 1; i < vertices.length; i++) {
      this.addLine(
        vertices[i - 1], vertices[i]
      );
    }
  }

  addNGon(points) {
    const vertices = [];
    for (const point of points) {
      vertices.push(this.addVertex(point[0], point[1], point[2]));
    }
    this.triangles.push(vertices);
  }

  addFace(index0, index1, index2) {
    this.triangles.push([index0, index1, index2]);
  }

  toFile() {
    return OBJ.CombineToFile(this);
  }

  /**
   * Reads the content of an obj file.
   * Works only if normals and uvs have same index as vertex.
   * Works only with single mesh
   * @ToDo: Test this method
   * @param {string} str OBJ Formatted string
   */
  import(str) {
    const lines = str.split("\n");
    for (let line of lines) {
      const parts = line.split(" ");

      if (parts[0] == "o") {
        this.name = line.substring(2);
        continue;
      }

      if (parts[0] == "v") {
        this.addVertex(+parts[1], +parts[2], +parts[3]);
        continue;
      }

      if (parts[0] == "vn") {
        this.addNormal(+parts[1], +parts[2], +parts[3]);
        continue;
      }

      if (parts[0] == "vt") {
        this.addUV(+parts[1], +parts[2]);
        continue;
      }

      if (parts[0] == "f") {
        this.addFace(+parts[1].split("/")[0], +parts[2].split("/")[0], +parts[3].split("/")[0]);
        continue;
      }
    }
  }

  static CombineToFile(objects) {
    let out = "# Generated by Patcher 2070\n";
    let vertexOffset = 0;

    for (const obj of objects) { 
      for (const vertex of obj.vertices) {
        out += `v ${vertex[0]} ${vertex[1]} ${vertex[2]}\n`;
      }
    }

    for (const obj of objects) {
      out += `o ${obj.name}\n`;

      for (const triangle of obj.triangles) {
        out += "f " + triangle.map(i => i + vertexOffset).join(" ") + "\n";
        // out += `f ${triangle[0] + vertexOffset} ${triangle[1] + vertexOffset} ${triangle[2] + vertexOffset}\n`
      }

      for (const line of obj.lines) {
        out += `l ${line[0] + vertexOffset} ${line[1] + vertexOffset}\n`
      }

      vertexOffset += obj.vertices.length;
    }

    return out;
  }

}